name: Auto Update Worker and Trigger Cloudflare Pages

on:
  push:
    branches:
      - main
  schedule:
    - cron: "0 16 * * *" # JST 每天凌晨1点（UTC 16:00 前一天）
  workflow_dispatch:
    inputs:
      force_update:
        description: '是否强制更新（忽略版本检查）'
        required: false
        default: 'false'

permissions:
  contents: write

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: 检出仓库
        uses: actions/checkout@v4

      - name: 设置环境
        run: |
          sudo apt-get update
          sudo apt-get install -y jq wget unzip
          echo "REPO_URL=https://api.github.com/repos/bia-pain-bache/BPB-Worker-Panel/releases" >> $GITHUB_ENV
          echo "TARGET_FILE=worker.zip" >> $GITHUB_ENV
          echo "TEMP_DIR=temp_worker" >> $GITHUB_ENV

      - name: 检查并更新 Worker
        id: check_update
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 日志函数
          log() { echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1"; }

          log "开始检查更新..."

          # 获取本地版本
          LOCAL_VERSION=$(cat version.txt 2>/dev/null || echo "无")
          log "本地版本: $LOCAL_VERSION"

          # 获取最新 Release
          log "获取 GitHub Release 信息..."
          RESPONSE=$(curl -s --retry 3 -H "Authorization: token $GITHUB_TOKEN" -H "Accept: application/vnd.github.v3+json" "$REPO_URL")
          if [ $? -ne 0 ]; then
            log "ERROR: 无法访问 GitHub API"
            exit 1
          fi

          TAG_NAME=$(echo "$RESPONSE" | jq -r '.[0].tag_name // empty')
          if [ -z "$TAG_NAME" ]; then
            log "ERROR: 未找到最新版本信息"
            exit 1
          fi
          DOWNLOAD_URL=$(echo "$RESPONSE" | jq -r '.[0].assets[] | select(.name == "'"$TARGET_FILE"'") | .browser_download_url // empty')
          if [ -z "$DOWNLOAD_URL" ]; then
            log "ERROR: 未找到 $TARGET_FILE"
            exit 1
          fi
          log "最新版本: $TAG_NAME"
          log "下载链接: $DOWNLOAD_URL"

          # 判断是否需要更新
          FORCE_UPDATE=${{ github.event.inputs.force_update || 'false' }}
          if [ "$LOCAL_VERSION" = "$TAG_NAME" ] && [ "$FORCE_UPDATE" != "true" ]; then
            log "已是最新版本，无需更新"
            echo "skip_update=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          # 下载并验证文件
          log "下载 $TARGET_FILE..."
          wget --tries=3 --timeout=30 -q -O "$TARGET_FILE" "$DOWNLOAD_URL"
          if [ ! -s "$TARGET_FILE" ]; then
            log "ERROR: 下载 $TARGET_FILE 失败"
            exit 1
          fi
          log "解压 $TARGET_FILE..."
          mkdir -p "$TEMP_DIR"
          unzip -o "$TARGET_FILE" -d "$TEMP_DIR"
          if [ $? -ne 0 ]; then
            log "ERROR: 解压 $TARGET_FILE 失败"
            exit 1
          fi
          rm "$TARGET_FILE"

          # 验证 temp_worker 目录
          if [ ! -d "$TEMP_DIR" ]; then
            log "ERROR: $TEMP_DIR 目录未创建"
            exit 1
          fi
          FILE_COUNT=$(find "$TEMP_DIR" -type f | wc -l)
          if [ "$FILE_COUNT" -eq 0 ]; then
            log "ERROR: $TEMP_DIR 目录为空"
            exit 1
          fi
          log "临时目录内容:"
          ls -l "$TEMP_DIR" || log "ERROR: 无法列出 $TEMP_DIR 内容"

          # 设置输出变量
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "skip_update=false" >> $GITHUB_OUTPUT
          echo "$TAG_NAME" > version.txt
          log "更新完成，新版本: $TAG_NAME"

      - name: 设置 Node.js 环境
        if: steps.check_update.outputs.skip_update != 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: 安装混淆工具
        if: steps.check_update.outputs.skip_update != 'true'
        run: |
          npm install -g javascript-obfuscator
          echo "OBFUSCATE_DIR=$TEMP_DIR" >> $GITHUB_ENV

      - name: 混淆代码
        if: steps.check_update.outputs.skip_update != 'true'
        run: |
          log() { echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1"; }
          log "开始混淆代码..."
          if [ ! -d "$OBFUSCATE_DIR" ]; then
            log "ERROR: $OBFUSCATE_DIR 目录不存在"
            exit 1
          fi
          JS_FILES=$(find "$OBFUSCATE_DIR" -type f -name "*.js" | wc -l)
          if [ "$JS_FILES" -eq 0 ]; then
            log "警告: 未在 $OBFUSCATE_DIR 中找到 .js 文件"
          else
            if [ ! -f "obfuscator-config.json" ]; then
              log "警告: 未找到 obfuscator-config.json，将使用默认混淆设置"
              find "$OBFUSCATE_DIR" -type f -name "*.js" -exec javascript-obfuscator {} --output {}.obfuscated \;
            else
              find "$OBFUSCATE_DIR" -type f -name "*.js" -exec javascript-obfuscator {} --output {}.obfuscated --config obfuscator-config.json \;
            fi
            find "$OBFUSCATE_DIR" -type f -name "*.js.obfuscated" -exec sh -c 'mv "$1" "${1%.obfuscated}"' _ {} \;
            log "代码混淆完成，处理了 $JS_FILES 个文件"
          fi

      - name: 移动混淆后的文件
        if: steps.check_update.outputs.skip_update != 'true'
        run: |
          log() { echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1"; }
          log "移动 $TEMP_DIR 中的文件..."
          mv "$TEMP_DIR"/* .
          rm -rf "$TEMP_DIR"
          log "文件移动完成"

      - name: 提交更改
        if: steps.check_update.outputs.skip_update != 'true'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "🔄 自动同步 Worker 版本: ${{ steps.check_update.outputs.tag_name }}"
          commit_author: "github-actions[bot] <github-actions[bot]@users.noreply.github.com>"
